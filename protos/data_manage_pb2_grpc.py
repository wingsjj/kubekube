# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from protos import data_manage_pb2 as protos_dot_data__manage__pb2


class ManagerStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddTask = channel.unary_unary(
                '/Manager/AddTask',
                request_serializer=protos_dot_data__manage__pb2.Task.SerializeToString,
                response_deserializer=protos_dot_data__manage__pb2.Reply.FromString,
                )
        self.DeleteTask = channel.unary_unary(
                '/Manager/DeleteTask',
                request_serializer=protos_dot_data__manage__pb2.Task.SerializeToString,
                response_deserializer=protos_dot_data__manage__pb2.Reply.FromString,
                )
        self.QueryTask = channel.unary_unary(
                '/Manager/QueryTask',
                request_serializer=protos_dot_data__manage__pb2.Task.SerializeToString,
                response_deserializer=protos_dot_data__manage__pb2.Reply.FromString,
                )
        self.UpdateTask = channel.unary_unary(
                '/Manager/UpdateTask',
                request_serializer=protos_dot_data__manage__pb2.Task.SerializeToString,
                response_deserializer=protos_dot_data__manage__pb2.Reply.FromString,
                )


class ManagerServicer(object):
    """The greeting service definition.
    """

    def AddTask(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTask(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryTask(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTask(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddTask': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTask,
                    request_deserializer=protos_dot_data__manage__pb2.Task.FromString,
                    response_serializer=protos_dot_data__manage__pb2.Reply.SerializeToString,
            ),
            'DeleteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTask,
                    request_deserializer=protos_dot_data__manage__pb2.Task.FromString,
                    response_serializer=protos_dot_data__manage__pb2.Reply.SerializeToString,
            ),
            'QueryTask': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryTask,
                    request_deserializer=protos_dot_data__manage__pb2.Task.FromString,
                    response_serializer=protos_dot_data__manage__pb2.Reply.SerializeToString,
            ),
            'UpdateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTask,
                    request_deserializer=protos_dot_data__manage__pb2.Task.FromString,
                    response_serializer=protos_dot_data__manage__pb2.Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Manager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Manager(object):
    """The greeting service definition.
    """

    @staticmethod
    def AddTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager/AddTask',
            protos_dot_data__manage__pb2.Task.SerializeToString,
            protos_dot_data__manage__pb2.Reply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager/DeleteTask',
            protos_dot_data__manage__pb2.Task.SerializeToString,
            protos_dot_data__manage__pb2.Reply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager/QueryTask',
            protos_dot_data__manage__pb2.Task.SerializeToString,
            protos_dot_data__manage__pb2.Reply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager/UpdateTask',
            protos_dot_data__manage__pb2.Task.SerializeToString,
            protos_dot_data__manage__pb2.Reply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
